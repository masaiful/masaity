{"version":3,"names":[],"mappings":"","sources":["packages/workbox-broadcast-cache-update/browser.mjs"],"sourcesContent":["this.workbox = this.workbox || {};\nthis.workbox.broadcastUpdate = (function (exports,WorkboxError_mjs,logger_mjs,assert_mjs,getFriendlyURL_mjs,Deferred_mjs) {\n  'use strict';\n\n  try {\n    self.workbox.v['workbox:broadcast-cache-update:4.0.0-beta.0'] = 1;\n  } catch (e) {} // eslint-disable-line\n\n  /*\n    Copyright 2018 Google LLC\n\n    Use of this source code is governed by an MIT-style\n    license that can be found in the LICENSE file or at\n    https://opensource.org/licenses/MIT.\n  */\n  /**\n   * Given two `Response's`, compares several header values to see if they are\n   * the same or not.\n   *\n   * @param {Response} firstResponse\n   * @param {Response} secondResponse\n   * @param {Array<string>} headersToCheck\n   * @return {boolean}\n   *\n   * @memberof workbox.broadcastUpdate\n   * @private\n   */\n\n  const responsesAreSame = (firstResponse, secondResponse, headersToCheck) => {\n    {\n      if (!(firstResponse instanceof Response && secondResponse instanceof Response)) {\n        throw new WorkboxError_mjs.WorkboxError('invalid-responses-are-same-args');\n      }\n    }\n\n    const atLeastOneHeaderAvailable = headersToCheck.some(header => {\n      return firstResponse.headers.has(header) && secondResponse.headers.has(header);\n    });\n\n    if (!atLeastOneHeaderAvailable) {\n      {\n        logger_mjs.logger.warn(`Unable to determine where the response has been updated ` + `because none of the headers that would be checked are present.`);\n        logger_mjs.logger.debug(`Attempting to compare the following: `, firstResponse, secondResponse, headersToCheck);\n      } // Just return true, indicating the that responses are the same, since we\n      // can't determine otherwise.\n\n\n      return true;\n    }\n\n    return headersToCheck.every(header => {\n      const headerStateComparison = firstResponse.headers.has(header) === secondResponse.headers.has(header);\n      const headerValueComparison = firstResponse.headers.get(header) === secondResponse.headers.get(header);\n      return headerStateComparison && headerValueComparison;\n    });\n  };\n\n  /*\n    Copyright 2018 Google LLC\n\n    Use of this source code is governed by an MIT-style\n    license that can be found in the LICENSE file or at\n    https://opensource.org/licenses/MIT.\n  */\n  const CACHE_UPDATED_MESSAGE_TYPE = 'CACHE_UPDATED';\n  const CACHE_UPDATED_MESSAGE_META = 'workbox-broadcast-cache-update';\n  const DEFAULT_BROADCAST_CHANNEL_NAME = 'workbox';\n  const DEFAULT_DEFER_NOTIFICATION_TIMEOUT = 10000;\n  const DEFAULT_HEADERS_TO_CHECK = ['content-length', 'etag', 'last-modified'];\n\n  /*\n    Copyright 2018 Google LLC\n\n    Use of this source code is governed by an MIT-style\n    license that can be found in the LICENSE file or at\n    https://opensource.org/licenses/MIT.\n  */\n  /**\n   * You would not normally call this method directly; it's called automatically\n   * by an instance of the {@link BroadcastCacheUpdate} class. It's exposed here\n   * for the benefit of developers who would rather not use the full\n   * `BroadcastCacheUpdate` implementation.\n   *\n   * Calling this will dispatch a message on the provided\n   * {@link https://developers.google.com/web/updates/2016/09/broadcastchannel|Broadcast Channel}\n   * to notify interested subscribers about a change to a cached resource.\n   *\n   * The message that's posted has a formation inspired by the\n   * [Flux standard action](https://github.com/acdlite/flux-standard-action#introduction)\n   * format like so:\n   *\n   * ```\n   * {\n   *   type: 'CACHE_UPDATED',\n   *   meta: 'workbox-broadcast-cache-update',\n   *   payload: {\n   *     cacheName: 'the-cache-name',\n   *     updatedUrl: 'https://example.com/'\n   *   }\n   * }\n   * ```\n   *\n   * (Usage of [Flux](https://facebook.github.io/flux/) itself is not at\n   * all required.)\n   *\n   * @param {Object} options\n   * @param {string} options.cacheName The name of the cache in which the updated\n   *     `Response` was stored.\n   * @param {string} options.url The URL associated with the updated `Response`.\n   * @param {BroadcastChannel} [options.channel] The `BroadcastChannel` to use.\n   *     If no channel is set or the browser doesn't support the BroadcastChannel\n   *     api, then an attempt will be made to `postMessage` each window client.\n   *\n   * @memberof workbox.broadcastUpdate\n   */\n\n  const broadcastUpdate = async ({\n    channel,\n    cacheName,\n    url\n  }) => {\n    {\n      assert_mjs.assert.isType(cacheName, 'string', {\n        moduleName: 'workbox-broadcast-cache-update',\n        className: '~',\n        funcName: 'broadcastUpdate',\n        paramName: 'cacheName'\n      });\n      assert_mjs.assert.isType(url, 'string', {\n        moduleName: 'workbox-broadcast-cache-update',\n        className: '~',\n        funcName: 'broadcastUpdate',\n        paramName: 'url'\n      });\n    }\n\n    const data = {\n      type: CACHE_UPDATED_MESSAGE_TYPE,\n      meta: CACHE_UPDATED_MESSAGE_META,\n      payload: {\n        cacheName: cacheName,\n        updatedUrl: url\n      }\n    };\n\n    if (channel) {\n      channel.postMessage(data);\n    } else {\n      const windows = await clients.matchAll({\n        type: 'window'\n      });\n\n      for (const win of windows) {\n        win.postMessage(data);\n      }\n    }\n  };\n\n  /*\n    Copyright 2018 Google LLC\n\n    Use of this source code is governed by an MIT-style\n    license that can be found in the LICENSE file or at\n    https://opensource.org/licenses/MIT.\n  */\n  /**\n   * Uses the [Broadcast Channel API]{@link https://developers.google.com/web/updates/2016/09/broadcastchannel}\n   * to notify interested parties when a cached response has been updated.\n   * In browsers that do not support the Broadcast Channel API, the instance\n   * falls back to sending the update via `postMessage()` to all window clients.\n   *\n   * For efficiency's sake, the underlying response bodies are not compared;\n   * only specific response headers are checked.\n   *\n   * @memberof workbox.broadcastUpdate\n   */\n\n  class BroadcastCacheUpdate {\n    /**\n     * Construct a BroadcastCacheUpdate instance with a specific `channelName` to\n     * broadcast messages on\n     *\n     * @param {Object} options\n     * @param {Array<string>}\n     *     [options.headersToCheck=['content-length', 'etag', 'last-modified']]\n     *     A list of headers that will be used to determine whether the responses\n     *     differ.\n     * @param {string} [options.channelName='workbox'] The name that will be used\n     *.    when creating the `BroadcastChannel`, which defaults to 'workbox' (the\n     *     channel name used by the `workbox-window` package).\n     * @param {string} [options.deferNoticationTimeout=10000] The amount of time\n     *     to wait for a ready message from the window on navigation requests\n     *     before sending the update.\n     */\n    constructor({\n      headersToCheck,\n      channelName,\n      deferNoticationTimeout\n    } = {}) {\n      this._headersToCheck = headersToCheck || DEFAULT_HEADERS_TO_CHECK;\n      this._channelName = channelName || DEFAULT_BROADCAST_CHANNEL_NAME;\n      this._deferNoticationTimeout = deferNoticationTimeout || DEFAULT_DEFER_NOTIFICATION_TIMEOUT;\n\n      {\n        assert_mjs.assert.isType(this._channelName, 'string', {\n          moduleName: 'workbox-broadcast-cache-update',\n          className: 'BroadcastCacheUpdate',\n          funcName: 'constructor',\n          paramName: 'channelName'\n        });\n        assert_mjs.assert.isArray(this._headersToCheck, {\n          moduleName: 'workbox-broadcast-cache-update',\n          className: 'BroadcastCacheUpdate',\n          funcName: 'constructor',\n          paramName: 'headersToCheck'\n        });\n      }\n\n      this._initWindowReadyDeferreds();\n    }\n    /**\n     * Compare two [Responses](https://developer.mozilla.org/en-US/docs/Web/API/Response)\n     * and send a message via the\n     * {@link https://developers.google.com/web/updates/2016/09/broadcastchannel|Broadcast Channel API}\n     * if they differ.\n     *\n     * Neither of the Responses can be {@link http://stackoverflow.com/questions/39109789|opaque}.\n     *\n     * @param {Object} options\n     * @param {Response} options.oldResponse Cached response to compare.\n     * @param {Response} options.newResponse Possibly updated response to compare.\n     * @param {string} options.url The URL of the request.\n     * @param {string} options.cacheName Name of the cache the responses belong\n     *     to. This is included in the broadcast message.\n     * @param {Event} [options.event] event An optional event that triggered\n     *     this possible cache update.\n     * @return {Promise} Resolves once the update is sent.\n     */\n\n\n    notifyIfUpdated({\n      oldResponse,\n      newResponse,\n      url,\n      cacheName,\n      event\n    }) {\n      if (!responsesAreSame(oldResponse, newResponse, this._headersToCheck)) {\n        {\n          logger_mjs.logger.log(`Newer response found (and cached) for:`, url);\n        }\n\n        const sendUpdate = async () => {\n          // In the case of a navigation request, the requesting page will likely\n          // not have loaded its JavaScript in time to recevied the update\n          // notification, so we defer it until ready (or we timeout waiting).\n          if (event && event.request.mode === 'navigate') {\n            {\n              logger_mjs.logger.debug(`Original request was a navigation request, ` + `waiting for a ready message from the window`, event.request);\n            }\n\n            await this._windowReadyOrTimeout(event);\n          }\n\n          await broadcastUpdate({\n            channel: this._getChannel(),\n            cacheName,\n            url\n          });\n        }; // Send the update and ensure the SW stays alive until it's sent.\n\n\n        const done = sendUpdate();\n\n        if (event) {\n          try {\n            event.waitUntil(done);\n          } catch (error) {\n            {\n              logger_mjs.logger.warn(`Unable to ensure service worker stays alive ` + `when broadcasting cache update for ` + `${getFriendlyURL_mjs.getFriendlyURL(event.request.url)}'.`);\n            }\n          }\n        }\n\n        return done;\n      }\n    }\n    /**\n     * @return {BroadcastChannel|undefined} The BroadcastChannel instance used for\n     * broadcasting updates, or undefined if the browser doesn't support the\n     * Broadcast Channel API.\n     *\n     * @private\n     */\n\n\n    _getChannel() {\n      if ('BroadcastChannel' in self && !this._channel) {\n        this._channel = new BroadcastChannel(this._channelName);\n      }\n\n      return this._channel;\n    }\n    /**\n     * Waits for a message from the window indicating that it's capable of\n     * receiving broadcasts. By default, this will only wait for the amount of\n     * time specified via the `deferNoticationTimeout` option.\n     *\n     * @param {Event} event The navigation fetch event.\n     * @return {Promise}\n     * @private\n     */\n\n\n    _windowReadyOrTimeout(event) {\n      if (!this._navigationEventsDeferreds.has(event)) {\n        const deferred = new Deferred_mjs.Deferred(); // Set the deferred on the `_navigationEventsDeferreds` map so it will\n        // be resolved when the next ready message event comes.\n\n        this._navigationEventsDeferreds.set(event, deferred); // But don't wait too long for the message since it may never come.\n\n\n        const timeout = setTimeout(() => {\n          {\n            logger_mjs.logger.debug(`Timed out after ${this._deferNoticationTimeout}` + `ms waiting for message from window`);\n          }\n\n          deferred.resolve();\n        }, this._deferNoticationTimeout); // Ensure the timeout is cleared if the deferred promise is resolved.\n\n        deferred.promise.then(() => clearTimeout(timeout));\n      }\n\n      return this._navigationEventsDeferreds.get(event).promise;\n    }\n    /**\n     * Creates a mapping between navigation fetch events and deferreds, and adds\n     * a listener for message events from the window. When message events arrive,\n     * all deferreds in the mapping are resolved.\n     *\n     * Note: it would be easier if we could only resolve the deferred of\n     * navigation fetch event whose client ID matched the source ID of the\n     * message event, but currently client IDs are not exposed on navigation\n     * fetch events: https://www.chromestatus.com/feature/4846038800138240\n     */\n\n\n    _initWindowReadyDeferreds() {\n      // A mapping between navigation events and their deferreds.\n      this._navigationEventsDeferreds = new Map(); // The message listener needs to be added in the initial run of the\n      // service worker, but since we don't actually need to be listening for\n      // messages until the cache updates, we only invoke the callback if set.\n\n      self.addEventListener('message', event => {\n        if (event.data.type === 'WINDOW_READY' && event.data.meta === 'workbox-window' && this._navigationEventsDeferreds.size > 0) {\n          {\n            logger_mjs.logger.debug(`Received WINDOW_READY event: `, event);\n          } // Resolve any pending deferreds.\n\n\n          for (const deferred of this._navigationEventsDeferreds.values()) {\n            deferred.resolve();\n          }\n\n          this._navigationEventsDeferreds.clear();\n        }\n      });\n    }\n\n  }\n\n  /*\n    Copyright 2018 Google LLC\n\n    Use of this source code is governed by an MIT-style\n    license that can be found in the LICENSE file or at\n    https://opensource.org/licenses/MIT.\n  */\n  /**\n   * This plugin will automatically broadcast a message whenever a cached response\n   * is updated.\n   *\n   * @memberof workbox.broadcastUpdate\n   */\n\n  class Plugin {\n    /**\n     * Construct a BroadcastCacheUpdate instance with the passed options and\n     * calls its `notifyIfUpdated()` method whenever the plugin's\n     * `cacheDidUpdate` callback is invoked.\n     *\n     * @param {Object} options\n     * @param {Array<string>}\n     *     [options.headersToCheck=['content-length', 'etag', 'last-modified']]\n     *     A list of headers that will be used to determine whether the responses\n     *     differ.\n     * @param {string} [options.channelName='workbox'] The name that will be used\n     *.    when creating the `BroadcastChannel`, which defaults to 'workbox' (the\n     *     channel name used by the `workbox-window` package).\n     * @param {string} [options.deferNoticationTimeout=10000] The amount of time\n     *     to wait for a ready message from the window on navigation requests\n     *     before sending the update.\n     */\n    constructor(options) {\n      this._broadcastUpdate = new BroadcastCacheUpdate(options);\n    }\n    /**\n     * A \"lifecycle\" callback that will be triggered automatically by the\n     * `workbox-sw` and `workbox-runtime-caching` handlers when an entry is\n     * added to a cache.\n     *\n     * @private\n     * @param {Object} options The input object to this function.\n     * @param {string} options.cacheName Name of the cache being updated.\n     * @param {Response} [options.oldResponse] The previous cached value, if any.\n     * @param {Response} options.newResponse The new value in the cache.\n     * @param {Request} options.request The request that triggered the udpate.\n     * @param {Request} [options.event] The event that triggered the update.\n     */\n\n\n    cacheDidUpdate({\n      cacheName,\n      oldResponse,\n      newResponse,\n      request,\n      event\n    }) {\n      {\n        assert_mjs.assert.isType(cacheName, 'string', {\n          moduleName: 'workbox-broadcast-cache-update',\n          className: 'Plugin',\n          funcName: 'cacheDidUpdate',\n          paramName: 'cacheName'\n        });\n        assert_mjs.assert.isInstance(newResponse, Response, {\n          moduleName: 'workbox-broadcast-cache-update',\n          className: 'Plugin',\n          funcName: 'cacheDidUpdate',\n          paramName: 'newResponse'\n        });\n        assert_mjs.assert.isInstance(request, Request, {\n          moduleName: 'workbox-broadcast-cache-update',\n          className: 'Plugin',\n          funcName: 'cacheDidUpdate',\n          paramName: 'request'\n        });\n      }\n\n      if (!oldResponse) {\n        // Without a two responses there is nothing to compare.\n        return;\n      }\n\n      this._broadcastUpdate.notifyIfUpdated({\n        cacheName,\n        oldResponse,\n        newResponse,\n        event,\n        url: request.url\n      });\n    }\n\n  }\n\n  /*\n    Copyright 2018 Google LLC\n\n    Use of this source code is governed by an MIT-style\n    license that can be found in the LICENSE file or at\n    https://opensource.org/licenses/MIT.\n  */\n\n  /*\n    Copyright 2018 Google LLC\n\n    Use of this source code is governed by an MIT-style\n    license that can be found in the LICENSE file or at\n    https://opensource.org/licenses/MIT.\n  */\n\n  exports.BroadcastCacheUpdate = BroadcastCacheUpdate;\n  exports.Plugin = Plugin;\n  exports.broadcastUpdate = broadcastUpdate;\n  exports.responsesAreSame = responsesAreSame;\n\n  return exports;\n\n}({},workbox.core._private,workbox.core._private,workbox.core._private,workbox.core._private,workbox.core._private));\n"],"file":"workbox-broadcast-cache-update.dev.js"}